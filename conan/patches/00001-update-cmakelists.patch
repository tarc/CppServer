diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5a21eed9..87ce02cc 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -18,36 +18,36 @@ if(DOXYGEN_FOUND)
 endif()
 
 # CMake module path
-set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
+# set(CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
 
 # Compiler features
-include(SetCompilerFeatures)
-include(SetCompilerWarnings)
-include(SetPlatformFeatures)
-include(SystemInformation)
+# include(SetCompilerFeatures)
+# include(SetCompilerWarnings)
+# include(SetPlatformFeatures)
+# include(SystemInformation)
 
 # External packages
-if(CYGWIN)
+if(FALSE)
   set(OPENSSL_ROOT_DIR "/usr/lib")
   set(OPENSSL_INCLUDE_DIR "/usr/include")
   set(OPENSSL_CRYPTO_LIBRARY "/usr/lib/libcrypto.dll.a")
   set(OPENSSL_SSL_LIBRARY "/usr/lib/libssl.dll.a")
-elseif(MINGW)
+elseif(FALSE)
   set(OPENSSL_ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/modules/OpenSSL/MinGW")
   set(OPENSSL_USE_STATIC_LIBS TRUE)
-elseif(MSVC)
+elseif(FALSE)
   set(OPENSSL_ROOT_DIR "${CMAKE_CURRENT_SOURCE_DIR}/modules/OpenSSL/VS")
   set(OPENSSL_USE_STATIC_LIBS TRUE)
   set(OPENSSL_MSVC_STATIC_RT TRUE)
 endif()
-find_package(OpenSSL REQUIRED)
-if(WIN32)
+# find_package(OpenSSL REQUIRED)
+if(FALSE)
   find_package(Crypt)
   find_package(WinSock)
 endif()
 
 # Modules
-add_subdirectory("modules")
+# add_subdirectory("modules")
 
 # Link libraries
 list(APPEND LINKLIBS ${OPENSSL_LIBRARIES})
@@ -58,10 +58,10 @@ endif()
 list(APPEND LINKLIBS cppcommon)
 
 # OpenSSL libraries
-message(STATUS "OpenSSL version: ${OPENSSL_VERSION} ${OPENSSL_INCLUDE_DIR} ${OPENSSL_LIBRARIES}")
+# message(STATUS "OpenSSL version: ${OPENSSL_VERSION} ${OPENSSL_INCLUDE_DIR} ${OPENSSL_LIBRARIES}")
 
 # System directories
-include_directories(SYSTEM "${CMAKE_CURRENT_SOURCE_DIR}/modules")
+# include_directories(SYSTEM "${CMAKE_CURRENT_SOURCE_DIR}/modules")
 
 # Library
 file(GLOB_RECURSE LIB_HEADER_FILES "include/*.h")
@@ -70,13 +70,13 @@ file(GLOB_RECURSE LIB_SOURCE_FILES "source/*.cpp")
 add_library(cppserver ${LIB_HEADER_FILES} ${LIB_INLINE_FILES} ${LIB_SOURCE_FILES})
 set_target_properties(cppserver PROPERTIES COMPILE_FLAGS "${PEDANTIC_COMPILE_FLAGS}" FOLDER "libraries")
 target_include_directories(cppserver PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include")
-target_link_libraries(cppserver ${LINKLIBS} asio)
+# target_link_libraries(cppserver ${LINKLIBS} asio)
 list(APPEND INSTALL_TARGETS cppserver)
 list(APPEND LINKLIBS cppserver)
 
 # Additional module components: benchmarks, examples, plugins, tests, tools and install
 if(NOT CPPSERVER_MODULE)
-
+if(FALSE)
   # Examples
   file(GLOB EXAMPLE_HEADER_FILES "examples/*.h")
   file(GLOB EXAMPLE_INLINE_FILES "examples/*.inl")
@@ -90,8 +90,8 @@ if(NOT CPPSERVER_MODULE)
     list(APPEND INSTALL_TARGETS ${EXAMPLE_TARGET})
     list(APPEND INSTALL_TARGETS_PDB ${EXAMPLE_TARGET})
   endforeach()
-
-  # Benchmarks
+endif(FALSE)
+if(FALSE)
   file(GLOB BENCHMARK_HEADER_FILES "performance/*.h")
   file(GLOB BENCHMARK_INLINE_FILES "performance/*.inl")
   file(GLOB BENCHMARK_SOURCE_FILES RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}/performance" "performance/*.cpp")
@@ -104,8 +104,8 @@ if(NOT CPPSERVER_MODULE)
     list(APPEND INSTALL_TARGETS ${BENCHMARK_TARGET})
     list(APPEND INSTALL_TARGETS_PDB ${BENCHMARK_TARGET})
   endforeach()
-
-  # Tests
+endif(FALSE)
+if(CPPSERVER_TESTS)
   file(GLOB TESTS_HEADER_FILES "tests/*.h")
   file(GLOB TESTS_INLINE_FILES "tests/*.inl")
   file(GLOB TESTS_SOURCE_FILES "tests/*.cpp")
@@ -115,21 +115,21 @@ if(NOT CPPSERVER_MODULE)
   target_link_libraries(cppserver-tests ${LINKLIBS})
   list(APPEND INSTALL_TARGETS cppserver-tests)
   list(APPEND INSTALL_TARGETS_PDB cppserver-tests)
-
+endif(CPPSERVER_TESTS)
   # CTest
   enable_testing()
-  add_test(cppserver-tests cppserver-tests --durations yes --order lex)
+  add_test(NAME cppserver-tests COMMAND cppserver-tests --durations yes --order lex)
 
   # Install
   install(TARGETS ${INSTALL_TARGETS}
-    RUNTIME DESTINATION "${PROJECT_SOURCE_DIR}/bin"
-    LIBRARY DESTINATION "${PROJECT_SOURCE_DIR}/bin"
-    ARCHIVE DESTINATION "${PROJECT_SOURCE_DIR}/bin")
+    RUNTIME DESTINATION "bin"
+    LIBRARY DESTINATION "lib"
+    ARCHIVE DESTINATION "lib")
 
   # Install *.pdb files
   if(MSVC)
     foreach(INSTALL_TARGET_PDB ${INSTALL_TARGETS_PDB})
-      install(FILES $<TARGET_PDB_FILE:${INSTALL_TARGET_PDB}> DESTINATION "${PROJECT_SOURCE_DIR}/bin")
+      install(FILES $<TARGET_PDB_FILE:${INSTALL_TARGET_PDB}> DESTINATION bin OPTIONAL)
     endforeach()
   endif()
 
